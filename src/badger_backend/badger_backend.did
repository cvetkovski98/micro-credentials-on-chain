type Claim = record {
    key : text;
    value : text;
};

type Badge = record {
    badgeID : nat;
    title : text;
    description : opt text;
    badgeType : nat16;
    issuer : Organisation;
    owner : User;
    isRevoked : bool;
    claims : vec Claim;
    signedBy : vec text;
    createdAt : nat64;
};

type NewBadge = record {
    title : text;
    description : opt text;
    badgeType : nat16;
    issuerID : nat;
    ownerID : text;
    claims : vec Claim;
};

type Organisation = record {
    organisationID : nat;
    name : text;
    createdAt : nat64;
};

type User = record {
    name : text;
    email : text;
    principalID: text;
    organisation : Organisation;
    roles : vec Role;
    createdAt : nat64;
};

type NewUserRequest = record {
    name : text;
    email : text;
    roles : vec nat;
    organisationID : nat;
};

type FileLocation = record {
    location : text;
};

type Role = record {
    roleID : nat;
    name : text;
};

type OrganisationGetAllResponse = variant {
    ok : vec Organisation;
    error : text;
};

type UserGetAllResponse = variant {
    ok : vec User;
    error : text;
};

type UserGetOneResponse = variant {
    ok : User;
    error : text;
};

type UserCreateOneResponse = variant {
    ok : User;
    error : text;
};

type BadgeGetAllResponse = variant {
    ok : vec Badge;
    error : text;
};

type BadgeGetOneResponse = variant {
    ok : Badge;
    error : text;
};

type BadgeDeleteOneResponse = variant {
    ok : bool;
    error : text;
};

type BadgeVerifyOneResponse = variant {
    ok : bool;
    error : text;
};

type BadgeCreateOneResponse = variant {
    ok : Badge;
    error : text;
};

type RoleGetAllResponse = variant {
    ok : vec Role;
    error : text;
};

service badger : {
    // organisations
    organisations_get_all : () -> (OrganisationGetAllResponse);

    // users
    users_whoami : () -> (UserGetOneResponse);
    users_get_all : (organisation_id : opt nat, role_id : opt nat) -> (UserGetAllResponse);
    users_get_one : (principal_id : text) -> (UserGetOneResponse);
    users_create_one : (user : NewUserRequest) -> (UserCreateOneResponse);

    // badges
    badges_get_all : (organisation_id : opt nat) -> (BadgeGetAllResponse);
    badges_get_one : (badge_id : nat) -> (BadgeGetOneResponse);
    badges_revoke_one : (badge_id : nat) -> (BadgeDeleteOneResponse);
    badges_create_one : (badge : NewBadge) -> (BadgeCreateOneResponse);

    // roles
    roles_get_all : () -> (RoleGetAllResponse);
};
